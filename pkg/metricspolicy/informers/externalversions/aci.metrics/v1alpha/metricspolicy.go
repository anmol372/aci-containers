/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha

import (
	"context"
	time "time"

	acimetricsv1alpha "github.com/noironetworks/aci-containers/pkg/metricspolicy/apis/aci.metrics/v1alpha"
	versioned "github.com/noironetworks/aci-containers/pkg/metricspolicy/clientset/versioned"
	internalinterfaces "github.com/noironetworks/aci-containers/pkg/metricspolicy/informers/externalversions/internalinterfaces"
	v1alpha "github.com/noironetworks/aci-containers/pkg/metricspolicy/listers/aci.metrics/v1alpha"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MetricsPolicyInformer provides access to a shared informer and lister for
// MetricsPolicies.
type MetricsPolicyInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha.MetricsPolicyLister
}

type metricsPolicyInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewMetricsPolicyInformer constructs a new informer for MetricsPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewMetricsPolicyInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredMetricsPolicyInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredMetricsPolicyInformer constructs a new informer for MetricsPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredMetricsPolicyInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AciV1alpha().MetricsPolicies().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AciV1alpha().MetricsPolicies().Watch(context.TODO(), options)
			},
		},
		&acimetricsv1alpha.MetricsPolicy{},
		resyncPeriod,
		indexers,
	)
}

func (f *metricsPolicyInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredMetricsPolicyInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *metricsPolicyInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&acimetricsv1alpha.MetricsPolicy{}, f.defaultInformer)
}

func (f *metricsPolicyInformer) Lister() v1alpha.MetricsPolicyLister {
	return v1alpha.NewMetricsPolicyLister(f.Informer().GetIndexer())
}
