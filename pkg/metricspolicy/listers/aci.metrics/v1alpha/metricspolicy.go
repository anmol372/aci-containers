/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/noironetworks/aci-containers/pkg/metricspolicy/apis/aci.metrics/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetricsPolicyLister helps list MetricsPolicies.
type MetricsPolicyLister interface {
	// List lists all MetricsPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.MetricsPolicy, err error)
	// Get retrieves the MetricsPolicy from the index for a given name.
	Get(name string) (*v1alpha.MetricsPolicy, error)
	MetricsPolicyListerExpansion
}

// metricsPolicyLister implements the MetricsPolicyLister interface.
type metricsPolicyLister struct {
	indexer cache.Indexer
}

// NewMetricsPolicyLister returns a new MetricsPolicyLister.
func NewMetricsPolicyLister(indexer cache.Indexer) MetricsPolicyLister {
	return &metricsPolicyLister{indexer: indexer}
}

// List lists all MetricsPolicies in the indexer.
func (s *metricsPolicyLister) List(selector labels.Selector) (ret []*v1alpha.MetricsPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.MetricsPolicy))
	})
	return ret, err
}

// Get retrieves the MetricsPolicy from the index for a given name.
func (s *metricsPolicyLister) Get(name string) (*v1alpha.MetricsPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("metricspolicy"), name)
	}
	return obj.(*v1alpha.MetricsPolicy), nil
}
